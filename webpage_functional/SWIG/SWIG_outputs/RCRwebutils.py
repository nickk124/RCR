# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RCRwebutils', [dirname(__file__)])
        except ImportError:
            import _RCRwebutils
            return _RCRwebutils
        if fp is not None:
            try:
                _mod = imp.load_module('_RCRwebutils', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _RCRwebutils = swig_import_helper()
    del swig_import_helper
else:
    import _RCRwebutils
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RCRwebutils.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _RCRwebutils.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RCRwebutils.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RCRwebutils.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RCRwebutils.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RCRwebutils.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RCRwebutils.SwigPyIterator_copy(self)

    def next(self):
        return _RCRwebutils.SwigPyIterator_next(self)

    def __next__(self):
        return _RCRwebutils.SwigPyIterator___next__(self)

    def previous(self):
        return _RCRwebutils.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RCRwebutils.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RCRwebutils.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RCRwebutils.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RCRwebutils.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RCRwebutils.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RCRwebutils.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RCRwebutils.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RCRwebutils.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def function_linear(x, params):
    return _RCRwebutils.function_linear(x, params)
function_linear = _RCRwebutils.function_linear

def partial1_linear(x, params):
    return _RCRwebutils.partial1_linear(x, params)
partial1_linear = _RCRwebutils.partial1_linear

def partial2_linear(x, params):
    return _RCRwebutils.partial2_linear(x, params)
partial2_linear = _RCRwebutils.partial2_linear

def function_quadratic(x, params):
    return _RCRwebutils.function_quadratic(x, params)
function_quadratic = _RCRwebutils.function_quadratic

def partial1_quadratic(x, params):
    return _RCRwebutils.partial1_quadratic(x, params)
partial1_quadratic = _RCRwebutils.partial1_quadratic

def partial2_quadratic(x, params):
    return _RCRwebutils.partial2_quadratic(x, params)
partial2_quadratic = _RCRwebutils.partial2_quadratic

def partial3_quadratic(x, params):
    return _RCRwebutils.partial3_quadratic(x, params)
partial3_quadratic = _RCRwebutils.partial3_quadratic

def function_cubic(x, params):
    return _RCRwebutils.function_cubic(x, params)
function_cubic = _RCRwebutils.function_cubic

def partial1_cubic(x, params):
    return _RCRwebutils.partial1_cubic(x, params)
partial1_cubic = _RCRwebutils.partial1_cubic

def partial2_cubic(x, params):
    return _RCRwebutils.partial2_cubic(x, params)
partial2_cubic = _RCRwebutils.partial2_cubic

def partial3_cubic(x, params):
    return _RCRwebutils.partial3_cubic(x, params)
partial3_cubic = _RCRwebutils.partial3_cubic

def partial4_cubic(x, params):
    return _RCRwebutils.partial4_cubic(x, params)
partial4_cubic = _RCRwebutils.partial4_cubic

def function_powerlaw(x, params):
    return _RCRwebutils.function_powerlaw(x, params)
function_powerlaw = _RCRwebutils.function_powerlaw

def partial1_powerlaw(x, params):
    return _RCRwebutils.partial1_powerlaw(x, params)
partial1_powerlaw = _RCRwebutils.partial1_powerlaw

def partial2_powerlaw(x, params):
    return _RCRwebutils.partial2_powerlaw(x, params)
partial2_powerlaw = _RCRwebutils.partial2_powerlaw

def function_exponential(x, params):
    return _RCRwebutils.function_exponential(x, params)
function_exponential = _RCRwebutils.function_exponential

def partial1_exponential(x, params):
    return _RCRwebutils.partial1_exponential(x, params)
partial1_exponential = _RCRwebutils.partial1_exponential

def partial2_exponential(x, params):
    return _RCRwebutils.partial2_exponential(x, params)
partial2_exponential = _RCRwebutils.partial2_exponential

def function_logarithmic(x, params):
    return _RCRwebutils.function_logarithmic(x, params)
function_logarithmic = _RCRwebutils.function_logarithmic

def partial1_logarithmic(x, params):
    return _RCRwebutils.partial1_logarithmic(x, params)
partial1_logarithmic = _RCRwebutils.partial1_logarithmic

def getPriors(priorsCheck, priorsParams, hasPriorsVec, guess):
    return _RCRwebutils.getPriors(priorsCheck, priorsParams, hasPriorsVec, guess)
getPriors = _RCRwebutils.getPriors

def requestHandlerUnWeighted(x, y, guess, fType, dataSize, rejTechNo, priorsCheck, priorsParams, hasPriorsVec):
    return _RCRwebutils.requestHandlerUnWeighted(x, y, guess, fType, dataSize, rejTechNo, priorsCheck, priorsParams, hasPriorsVec)
requestHandlerUnWeighted = _RCRwebutils.requestHandlerUnWeighted

def requestHandlerWeighted(x, y, guess, w, fType, dataSize, rejTechNo, priorsCheck, priorsParams, hasPriorsVec):
    return _RCRwebutils.requestHandlerWeighted(x, y, guess, w, fType, dataSize, rejTechNo, priorsCheck, priorsParams, hasPriorsVec)
requestHandlerWeighted = _RCRwebutils.requestHandlerWeighted

_RCRwebutils.MEAN_swigconstant(_RCRwebutils)
MEAN = _RCRwebutils.MEAN

_RCRwebutils.MEDIAN_swigconstant(_RCRwebutils)
MEDIAN = _RCRwebutils.MEDIAN

_RCRwebutils.MODE_swigconstant(_RCRwebutils)
MODE = _RCRwebutils.MODE

_RCRwebutils.STANDARD_DEVIATION_swigconstant(_RCRwebutils)
STANDARD_DEVIATION = _RCRwebutils.STANDARD_DEVIATION

_RCRwebutils.SIXTY_EIGHTH_PERCENTILE_swigconstant(_RCRwebutils)
SIXTY_EIGHTH_PERCENTILE = _RCRwebutils.SIXTY_EIGHTH_PERCENTILE

_RCRwebutils.SINGLE_LINE_swigconstant(_RCRwebutils)
SINGLE_LINE = _RCRwebutils.SINGLE_LINE

_RCRwebutils.DOUBLE_LINE_swigconstant(_RCRwebutils)
DOUBLE_LINE = _RCRwebutils.DOUBLE_LINE

_RCRwebutils.SINGLE_swigconstant(_RCRwebutils)
SINGLE = _RCRwebutils.SINGLE

_RCRwebutils.LOWER_swigconstant(_RCRwebutils)
LOWER = _RCRwebutils.LOWER

_RCRwebutils.EACH_swigconstant(_RCRwebutils)
EACH = _RCRwebutils.EACH

_RCRwebutils.SS_MEDIAN_DL_swigconstant(_RCRwebutils)
SS_MEDIAN_DL = _RCRwebutils.SS_MEDIAN_DL

_RCRwebutils.LS_MODE_68_swigconstant(_RCRwebutils)
LS_MODE_68 = _RCRwebutils.LS_MODE_68

_RCRwebutils.LS_MODE_DL_swigconstant(_RCRwebutils)
LS_MODE_DL = _RCRwebutils.LS_MODE_DL

_RCRwebutils.ES_MODE_DL_swigconstant(_RCRwebutils)
ES_MODE_DL = _RCRwebutils.ES_MODE_DL

_RCRwebutils.VALUE_swigconstant(_RCRwebutils)
VALUE = _RCRwebutils.VALUE

_RCRwebutils.PARAMETRIC_swigconstant(_RCRwebutils)
PARAMETRIC = _RCRwebutils.PARAMETRIC

_RCRwebutils.NONPARAMETRIC_swigconstant(_RCRwebutils)
NONPARAMETRIC = _RCRwebutils.NONPARAMETRIC
class RCRResults(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCRResults, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RCRResults, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mu"] = _RCRwebutils.RCRResults_mu_set
    __swig_getmethods__["mu"] = _RCRwebutils.RCRResults_mu_get
    if _newclass:
        mu = _swig_property(_RCRwebutils.RCRResults_mu_get, _RCRwebutils.RCRResults_mu_set)
    __swig_setmethods__["stDev"] = _RCRwebutils.RCRResults_stDev_set
    __swig_getmethods__["stDev"] = _RCRwebutils.RCRResults_stDev_get
    if _newclass:
        stDev = _swig_property(_RCRwebutils.RCRResults_stDev_get, _RCRwebutils.RCRResults_stDev_set)
    __swig_setmethods__["stDevBelow"] = _RCRwebutils.RCRResults_stDevBelow_set
    __swig_getmethods__["stDevBelow"] = _RCRwebutils.RCRResults_stDevBelow_get
    if _newclass:
        stDevBelow = _swig_property(_RCRwebutils.RCRResults_stDevBelow_get, _RCRwebutils.RCRResults_stDevBelow_set)
    __swig_setmethods__["stDevAbove"] = _RCRwebutils.RCRResults_stDevAbove_set
    __swig_getmethods__["stDevAbove"] = _RCRwebutils.RCRResults_stDevAbove_get
    if _newclass:
        stDevAbove = _swig_property(_RCRwebutils.RCRResults_stDevAbove_get, _RCRwebutils.RCRResults_stDevAbove_set)
    __swig_setmethods__["stDevTotal"] = _RCRwebutils.RCRResults_stDevTotal_set
    __swig_getmethods__["stDevTotal"] = _RCRwebutils.RCRResults_stDevTotal_get
    if _newclass:
        stDevTotal = _swig_property(_RCRwebutils.RCRResults_stDevTotal_get, _RCRwebutils.RCRResults_stDevTotal_set)
    __swig_setmethods__["sigma"] = _RCRwebutils.RCRResults_sigma_set
    __swig_getmethods__["sigma"] = _RCRwebutils.RCRResults_sigma_get
    if _newclass:
        sigma = _swig_property(_RCRwebutils.RCRResults_sigma_get, _RCRwebutils.RCRResults_sigma_set)
    __swig_setmethods__["sigmaBelow"] = _RCRwebutils.RCRResults_sigmaBelow_set
    __swig_getmethods__["sigmaBelow"] = _RCRwebutils.RCRResults_sigmaBelow_get
    if _newclass:
        sigmaBelow = _swig_property(_RCRwebutils.RCRResults_sigmaBelow_get, _RCRwebutils.RCRResults_sigmaBelow_set)
    __swig_setmethods__["sigmaAbove"] = _RCRwebutils.RCRResults_sigmaAbove_set
    __swig_getmethods__["sigmaAbove"] = _RCRwebutils.RCRResults_sigmaAbove_get
    if _newclass:
        sigmaAbove = _swig_property(_RCRwebutils.RCRResults_sigmaAbove_get, _RCRwebutils.RCRResults_sigmaAbove_set)
    __swig_setmethods__["flags"] = _RCRwebutils.RCRResults_flags_set
    __swig_getmethods__["flags"] = _RCRwebutils.RCRResults_flags_get
    if _newclass:
        flags = _swig_property(_RCRwebutils.RCRResults_flags_get, _RCRwebutils.RCRResults_flags_set)
    __swig_setmethods__["indices"] = _RCRwebutils.RCRResults_indices_set
    __swig_getmethods__["indices"] = _RCRwebutils.RCRResults_indices_get
    if _newclass:
        indices = _swig_property(_RCRwebutils.RCRResults_indices_get, _RCRwebutils.RCRResults_indices_set)
    __swig_setmethods__["cleanW"] = _RCRwebutils.RCRResults_cleanW_set
    __swig_getmethods__["cleanW"] = _RCRwebutils.RCRResults_cleanW_get
    if _newclass:
        cleanW = _swig_property(_RCRwebutils.RCRResults_cleanW_get, _RCRwebutils.RCRResults_cleanW_set)
    __swig_setmethods__["cleanY"] = _RCRwebutils.RCRResults_cleanY_set
    __swig_getmethods__["cleanY"] = _RCRwebutils.RCRResults_cleanY_get
    if _newclass:
        cleanY = _swig_property(_RCRwebutils.RCRResults_cleanY_get, _RCRwebutils.RCRResults_cleanY_set)
    __swig_setmethods__["rejectedW"] = _RCRwebutils.RCRResults_rejectedW_set
    __swig_getmethods__["rejectedW"] = _RCRwebutils.RCRResults_rejectedW_get
    if _newclass:
        rejectedW = _swig_property(_RCRwebutils.RCRResults_rejectedW_get, _RCRwebutils.RCRResults_rejectedW_set)
    __swig_setmethods__["rejectedY"] = _RCRwebutils.RCRResults_rejectedY_set
    __swig_getmethods__["rejectedY"] = _RCRwebutils.RCRResults_rejectedY_get
    if _newclass:
        rejectedY = _swig_property(_RCRwebutils.RCRResults_rejectedY_get, _RCRwebutils.RCRResults_rejectedY_set)
    __swig_setmethods__["originalW"] = _RCRwebutils.RCRResults_originalW_set
    __swig_getmethods__["originalW"] = _RCRwebutils.RCRResults_originalW_get
    if _newclass:
        originalW = _swig_property(_RCRwebutils.RCRResults_originalW_get, _RCRwebutils.RCRResults_originalW_set)
    __swig_setmethods__["originalY"] = _RCRwebutils.RCRResults_originalY_set
    __swig_getmethods__["originalY"] = _RCRwebutils.RCRResults_originalY_get
    if _newclass:
        originalY = _swig_property(_RCRwebutils.RCRResults_originalY_get, _RCRwebutils.RCRResults_originalY_set)

    def __init__(self):
        this = _RCRwebutils.new_RCRResults()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _RCRwebutils.delete_RCRResults
    __del__ = lambda self: None
RCRResults_swigregister = _RCRwebutils.RCRResults_swigregister
RCRResults_swigregister(RCRResults)
cvar = _RCRwebutils.cvar
PI = cvar.PI
inverfMult = cvar.inverfMult
squareRootOf2 = cvar.squareRootOf2

class RCR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RCR, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _RCRwebutils.new_RCR(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["rejectionTech"] = _RCRwebutils.RCR_rejectionTech_set
    __swig_getmethods__["rejectionTech"] = _RCRwebutils.RCR_rejectionTech_get
    if _newclass:
        rejectionTech = _swig_property(_RCRwebutils.RCR_rejectionTech_get, _RCRwebutils.RCR_rejectionTech_set)
    __swig_setmethods__["result"] = _RCRwebutils.RCR_result_set
    __swig_getmethods__["result"] = _RCRwebutils.RCR_result_get
    if _newclass:
        result = _swig_property(_RCRwebutils.RCR_result_get, _RCRwebutils.RCR_result_set)
    __swig_destroy__ = _RCRwebutils.delete_RCR
    __del__ = lambda self: None

    def setRejectionTech(self, arg2):
        return _RCRwebutils.RCR_setRejectionTech(self, arg2)

    def performRejection(self, *args):
        return _RCRwebutils.RCR_performRejection(self, *args)

    def performBulkRejection(self, *args):
        return _RCRwebutils.RCR_performBulkRejection(self, *args)

    def setParametricModel(self, arg2):
        return _RCRwebutils.RCR_setParametricModel(self, arg2)

    def setNonParametricModel(self, arg2):
        return _RCRwebutils.RCR_setNonParametricModel(self, arg2)

    def setInitialModel(self, arg2):
        return _RCRwebutils.RCR_setInitialModel(self, arg2)

    def setMuType(self, arg2):
        return _RCRwebutils.RCR_setMuType(self, arg2)
RCR_swigregister = _RCRwebutils.RCR_swigregister
RCR_swigregister(RCR)


_RCRwebutils.CUSTOM_swigconstant(_RCRwebutils)
CUSTOM = _RCRwebutils.CUSTOM

_RCRwebutils.GAUSSIAN_swigconstant(_RCRwebutils)
GAUSSIAN = _RCRwebutils.GAUSSIAN

_RCRwebutils.CONSTRAINED_swigconstant(_RCRwebutils)
CONSTRAINED = _RCRwebutils.CONSTRAINED

_RCRwebutils.MIXED_swigconstant(_RCRwebutils)
MIXED = _RCRwebutils.MIXED
class Priors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Priors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Priors, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _RCRwebutils.new_Priors(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["priorType"] = _RCRwebutils.Priors_priorType_set
    __swig_getmethods__["priorType"] = _RCRwebutils.Priors_priorType_get
    if _newclass:
        priorType = _swig_property(_RCRwebutils.Priors_priorType_get, _RCRwebutils.Priors_priorType_set)
    __swig_setmethods__["p"] = _RCRwebutils.Priors_p_set
    __swig_getmethods__["p"] = _RCRwebutils.Priors_p_get
    if _newclass:
        p = _swig_property(_RCRwebutils.Priors_p_get, _RCRwebutils.Priors_p_set)
    __swig_setmethods__["gaussianParams"] = _RCRwebutils.Priors_gaussianParams_set
    __swig_getmethods__["gaussianParams"] = _RCRwebutils.Priors_gaussianParams_get
    if _newclass:
        gaussianParams = _swig_property(_RCRwebutils.Priors_gaussianParams_get, _RCRwebutils.Priors_gaussianParams_set)
    __swig_setmethods__["paramBounds"] = _RCRwebutils.Priors_paramBounds_set
    __swig_getmethods__["paramBounds"] = _RCRwebutils.Priors_paramBounds_get
    if _newclass:
        paramBounds = _swig_property(_RCRwebutils.Priors_paramBounds_get, _RCRwebutils.Priors_paramBounds_set)
    __swig_destroy__ = _RCRwebutils.delete_Priors
    __del__ = lambda self: None
Priors_swigregister = _RCRwebutils.Priors_swigregister
Priors_swigregister(Priors)

class FunctionalForm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionalForm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionalForm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _RCRwebutils.new_FunctionalForm(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def setTrueVec(self, *args):
        return _RCRwebutils.FunctionalForm_setTrueVec(self, *args)

    def buildModelSpace(self):
        return _RCRwebutils.FunctionalForm_buildModelSpace(self)

    def regression(self):
        return _RCRwebutils.FunctionalForm_regression(self)

    def getErrors(self, line):
        return _RCRwebutils.FunctionalForm_getErrors(self, line)

    def getErrors_ND(self, line):
        return _RCRwebutils.FunctionalForm_getErrors_ND(self, line)

    def setModel(self, arg2):
        return _RCRwebutils.FunctionalForm_setModel(self, arg2)

    def printData(self):
        return _RCRwebutils.FunctionalForm_printData(self)

    def getCombos(self, *args):
        return _RCRwebutils.FunctionalForm_getCombos(self, *args)
    __swig_destroy__ = _RCRwebutils.delete_FunctionalForm
    __del__ = lambda self: None
    __swig_setmethods__["wbar"] = _RCRwebutils.FunctionalForm_wbar_set
    __swig_getmethods__["wbar"] = _RCRwebutils.FunctionalForm_wbar_get
    if _newclass:
        wbar = _swig_property(_RCRwebutils.FunctionalForm_wbar_get, _RCRwebutils.FunctionalForm_wbar_set)
    __swig_setmethods__["flags"] = _RCRwebutils.FunctionalForm_flags_set
    __swig_getmethods__["flags"] = _RCRwebutils.FunctionalForm_flags_get
    if _newclass:
        flags = _swig_property(_RCRwebutils.FunctionalForm_flags_get, _RCRwebutils.FunctionalForm_flags_set)
    __swig_setmethods__["indices"] = _RCRwebutils.FunctionalForm_indices_set
    __swig_getmethods__["indices"] = _RCRwebutils.FunctionalForm_indices_get
    if _newclass:
        indices = _swig_property(_RCRwebutils.FunctionalForm_indices_get, _RCRwebutils.FunctionalForm_indices_set)
    __swig_setmethods__["trueW"] = _RCRwebutils.FunctionalForm_trueW_set
    __swig_getmethods__["trueW"] = _RCRwebutils.FunctionalForm_trueW_get
    if _newclass:
        trueW = _swig_property(_RCRwebutils.FunctionalForm_trueW_get, _RCRwebutils.FunctionalForm_trueW_set)
    __swig_setmethods__["trueY"] = _RCRwebutils.FunctionalForm_trueY_set
    __swig_getmethods__["trueY"] = _RCRwebutils.FunctionalForm_trueY_get
    if _newclass:
        trueY = _swig_property(_RCRwebutils.FunctionalForm_trueY_get, _RCRwebutils.FunctionalForm_trueY_set)
    __swig_setmethods__["x"] = _RCRwebutils.FunctionalForm_x_set
    __swig_getmethods__["x"] = _RCRwebutils.FunctionalForm_x_get
    if _newclass:
        x = _swig_property(_RCRwebutils.FunctionalForm_x_get, _RCRwebutils.FunctionalForm_x_set)
    __swig_setmethods__["y"] = _RCRwebutils.FunctionalForm_y_set
    __swig_getmethods__["y"] = _RCRwebutils.FunctionalForm_y_get
    if _newclass:
        y = _swig_property(_RCRwebutils.FunctionalForm_y_get, _RCRwebutils.FunctionalForm_y_set)
    __swig_setmethods__["guess"] = _RCRwebutils.FunctionalForm_guess_set
    __swig_getmethods__["guess"] = _RCRwebutils.FunctionalForm_guess_get
    if _newclass:
        guess = _swig_property(_RCRwebutils.FunctionalForm_guess_get, _RCRwebutils.FunctionalForm_guess_set)
    __swig_setmethods__["sigma_y"] = _RCRwebutils.FunctionalForm_sigma_y_set
    __swig_getmethods__["sigma_y"] = _RCRwebutils.FunctionalForm_sigma_y_get
    if _newclass:
        sigma_y = _swig_property(_RCRwebutils.FunctionalForm_sigma_y_get, _RCRwebutils.FunctionalForm_sigma_y_set)
    __swig_setmethods__["w"] = _RCRwebutils.FunctionalForm_w_set
    __swig_getmethods__["w"] = _RCRwebutils.FunctionalForm_w_get
    if _newclass:
        w = _swig_property(_RCRwebutils.FunctionalForm_w_get, _RCRwebutils.FunctionalForm_w_set)
    __swig_setmethods__["modelSpaceW"] = _RCRwebutils.FunctionalForm_modelSpaceW_set
    __swig_getmethods__["modelSpaceW"] = _RCRwebutils.FunctionalForm_modelSpaceW_get
    if _newclass:
        modelSpaceW = _swig_property(_RCRwebutils.FunctionalForm_modelSpaceW_get, _RCRwebutils.FunctionalForm_modelSpaceW_set)
    __swig_setmethods__["meanstartingpoint"] = _RCRwebutils.FunctionalForm_meanstartingpoint_set
    __swig_getmethods__["meanstartingpoint"] = _RCRwebutils.FunctionalForm_meanstartingpoint_get
    if _newclass:
        meanstartingpoint = _swig_property(_RCRwebutils.FunctionalForm_meanstartingpoint_get, _RCRwebutils.FunctionalForm_meanstartingpoint_set)
    __swig_setmethods__["innerSpace"] = _RCRwebutils.FunctionalForm_innerSpace_set
    __swig_getmethods__["innerSpace"] = _RCRwebutils.FunctionalForm_innerSpace_get
    if _newclass:
        innerSpace = _swig_property(_RCRwebutils.FunctionalForm_innerSpace_get, _RCRwebutils.FunctionalForm_innerSpace_set)
    __swig_setmethods__["parameters"] = _RCRwebutils.FunctionalForm_parameters_set
    __swig_getmethods__["parameters"] = _RCRwebutils.FunctionalForm_parameters_get
    if _newclass:
        parameters = _swig_property(_RCRwebutils.FunctionalForm_parameters_get, _RCRwebutils.FunctionalForm_parameters_set)
    __swig_setmethods__["parameterSpace"] = _RCRwebutils.FunctionalForm_parameterSpace_set
    __swig_getmethods__["parameterSpace"] = _RCRwebutils.FunctionalForm_parameterSpace_get
    if _newclass:
        parameterSpace = _swig_property(_RCRwebutils.FunctionalForm_parameterSpace_get, _RCRwebutils.FunctionalForm_parameterSpace_set)
    __swig_setmethods__["weightSpace"] = _RCRwebutils.FunctionalForm_weightSpace_set
    __swig_getmethods__["weightSpace"] = _RCRwebutils.FunctionalForm_weightSpace_get
    if _newclass:
        weightSpace = _swig_property(_RCRwebutils.FunctionalForm_weightSpace_get, _RCRwebutils.FunctionalForm_weightSpace_set)
    __swig_setmethods__["x_ND"] = _RCRwebutils.FunctionalForm_x_ND_set
    __swig_getmethods__["x_ND"] = _RCRwebutils.FunctionalForm_x_ND_get
    if _newclass:
        x_ND = _swig_property(_RCRwebutils.FunctionalForm_x_ND_get, _RCRwebutils.FunctionalForm_x_ND_set)
    __swig_setmethods__["extraParameterSpace"] = _RCRwebutils.FunctionalForm_extraParameterSpace_set
    __swig_getmethods__["extraParameterSpace"] = _RCRwebutils.FunctionalForm_extraParameterSpace_get
    if _newclass:
        extraParameterSpace = _swig_property(_RCRwebutils.FunctionalForm_extraParameterSpace_get, _RCRwebutils.FunctionalForm_extraParameterSpace_set)
    __swig_setmethods__["extraWeightSpace"] = _RCRwebutils.FunctionalForm_extraWeightSpace_set
    __swig_getmethods__["extraWeightSpace"] = _RCRwebutils.FunctionalForm_extraWeightSpace_get
    if _newclass:
        extraWeightSpace = _swig_property(_RCRwebutils.FunctionalForm_extraWeightSpace_get, _RCRwebutils.FunctionalForm_extraWeightSpace_set)
    __swig_setmethods__["partialsvector"] = _RCRwebutils.FunctionalForm_partialsvector_set
    __swig_getmethods__["partialsvector"] = _RCRwebutils.FunctionalForm_partialsvector_get
    if _newclass:
        partialsvector = _swig_property(_RCRwebutils.FunctionalForm_partialsvector_get, _RCRwebutils.FunctionalForm_partialsvector_set)
    __swig_setmethods__["NDpartialsvector"] = _RCRwebutils.FunctionalForm_NDpartialsvector_set
    __swig_getmethods__["NDpartialsvector"] = _RCRwebutils.FunctionalForm_NDpartialsvector_get
    if _newclass:
        NDpartialsvector = _swig_property(_RCRwebutils.FunctionalForm_NDpartialsvector_get, _RCRwebutils.FunctionalForm_NDpartialsvector_set)
    __swig_setmethods__["M"] = _RCRwebutils.FunctionalForm_M_set
    __swig_getmethods__["M"] = _RCRwebutils.FunctionalForm_M_get
    if _newclass:
        M = _swig_property(_RCRwebutils.FunctionalForm_M_get, _RCRwebutils.FunctionalForm_M_set)
    __swig_setmethods__["N"] = _RCRwebutils.FunctionalForm_N_set
    __swig_getmethods__["N"] = _RCRwebutils.FunctionalForm_N_get
    if _newclass:
        N = _swig_property(_RCRwebutils.FunctionalForm_N_get, _RCRwebutils.FunctionalForm_N_set)
    __swig_setmethods__["tolerance"] = _RCRwebutils.FunctionalForm_tolerance_set
    __swig_getmethods__["tolerance"] = _RCRwebutils.FunctionalForm_tolerance_get
    if _newclass:
        tolerance = _swig_property(_RCRwebutils.FunctionalForm_tolerance_get, _RCRwebutils.FunctionalForm_tolerance_set)
    __swig_setmethods__["combos"] = _RCRwebutils.FunctionalForm_combos_set
    __swig_getmethods__["combos"] = _RCRwebutils.FunctionalForm_combos_get
    if _newclass:
        combos = _swig_property(_RCRwebutils.FunctionalForm_combos_get, _RCRwebutils.FunctionalForm_combos_set)
    __swig_setmethods__["combos_indices"] = _RCRwebutils.FunctionalForm_combos_indices_set
    __swig_getmethods__["combos_indices"] = _RCRwebutils.FunctionalForm_combos_indices_get
    if _newclass:
        combos_indices = _swig_property(_RCRwebutils.FunctionalForm_combos_indices_get, _RCRwebutils.FunctionalForm_combos_indices_set)
    __swig_setmethods__["combination"] = _RCRwebutils.FunctionalForm_combination_set
    __swig_getmethods__["combination"] = _RCRwebutils.FunctionalForm_combination_get
    if _newclass:
        combination = _swig_property(_RCRwebutils.FunctionalForm_combination_get, _RCRwebutils.FunctionalForm_combination_set)
    __swig_setmethods__["combination_indices"] = _RCRwebutils.FunctionalForm_combination_indices_set
    __swig_getmethods__["combination_indices"] = _RCRwebutils.FunctionalForm_combination_indices_get
    if _newclass:
        combination_indices = _swig_property(_RCRwebutils.FunctionalForm_combination_indices_get, _RCRwebutils.FunctionalForm_combination_indices_set)
    __swig_setmethods__["NDcombos"] = _RCRwebutils.FunctionalForm_NDcombos_set
    __swig_getmethods__["NDcombos"] = _RCRwebutils.FunctionalForm_NDcombos_get
    if _newclass:
        NDcombos = _swig_property(_RCRwebutils.FunctionalForm_NDcombos_get, _RCRwebutils.FunctionalForm_NDcombos_set)
    __swig_setmethods__["NDcombination"] = _RCRwebutils.FunctionalForm_NDcombination_set
    __swig_getmethods__["NDcombination"] = _RCRwebutils.FunctionalForm_NDcombination_get
    if _newclass:
        NDcombination = _swig_property(_RCRwebutils.FunctionalForm_NDcombination_get, _RCRwebutils.FunctionalForm_NDcombination_set)
    __swig_setmethods__["combosgood_indices"] = _RCRwebutils.FunctionalForm_combosgood_indices_set
    __swig_getmethods__["combosgood_indices"] = _RCRwebutils.FunctionalForm_combosgood_indices_get
    if _newclass:
        combosgood_indices = _swig_property(_RCRwebutils.FunctionalForm_combosgood_indices_get, _RCRwebutils.FunctionalForm_combosgood_indices_set)
    __swig_setmethods__["NDcheck"] = _RCRwebutils.FunctionalForm_NDcheck_set
    __swig_getmethods__["NDcheck"] = _RCRwebutils.FunctionalForm_NDcheck_get
    if _newclass:
        NDcheck = _swig_property(_RCRwebutils.FunctionalForm_NDcheck_get, _RCRwebutils.FunctionalForm_NDcheck_set)
    __swig_setmethods__["weightedCheck"] = _RCRwebutils.FunctionalForm_weightedCheck_set
    __swig_getmethods__["weightedCheck"] = _RCRwebutils.FunctionalForm_weightedCheck_get
    if _newclass:
        weightedCheck = _swig_property(_RCRwebutils.FunctionalForm_weightedCheck_get, _RCRwebutils.FunctionalForm_weightedCheck_set)
    __swig_setmethods__["f"] = _RCRwebutils.FunctionalForm_f_set
    __swig_getmethods__["f"] = _RCRwebutils.FunctionalForm_f_get
    if _newclass:
        f = _swig_property(_RCRwebutils.FunctionalForm_f_get, _RCRwebutils.FunctionalForm_f_set)
    __swig_setmethods__["f_ND"] = _RCRwebutils.FunctionalForm_f_ND_set
    __swig_getmethods__["f_ND"] = _RCRwebutils.FunctionalForm_f_ND_get
    if _newclass:
        f_ND = _swig_property(_RCRwebutils.FunctionalForm_f_ND_get, _RCRwebutils.FunctionalForm_f_ND_set)
    __swig_setmethods__["priorsObject"] = _RCRwebutils.FunctionalForm_priorsObject_set
    __swig_getmethods__["priorsObject"] = _RCRwebutils.FunctionalForm_priorsObject_get
    if _newclass:
        priorsObject = _swig_property(_RCRwebutils.FunctionalForm_priorsObject_get, _RCRwebutils.FunctionalForm_priorsObject_set)
    __swig_setmethods__["hasPriors"] = _RCRwebutils.FunctionalForm_hasPriors_set
    __swig_getmethods__["hasPriors"] = _RCRwebutils.FunctionalForm_hasPriors_get
    if _newclass:
        hasPriors = _swig_property(_RCRwebutils.FunctionalForm_hasPriors_get, _RCRwebutils.FunctionalForm_hasPriors_set)
    __swig_setmethods__["hasErrorBars"] = _RCRwebutils.FunctionalForm_hasErrorBars_set
    __swig_getmethods__["hasErrorBars"] = _RCRwebutils.FunctionalForm_hasErrorBars_get
    if _newclass:
        hasErrorBars = _swig_property(_RCRwebutils.FunctionalForm_hasErrorBars_get, _RCRwebutils.FunctionalForm_hasErrorBars_set)
FunctionalForm_swigregister = _RCRwebutils.FunctionalForm_swigregister
FunctionalForm_swigregister(FunctionalForm)


def getCofactor(A, p, q):
    return _RCRwebutils.getCofactor(A, p, q)
getCofactor = _RCRwebutils.getCofactor

def determinant(A):
    return _RCRwebutils.determinant(A)
determinant = _RCRwebutils.determinant

def adjoint(A):
    return _RCRwebutils.adjoint(A)
adjoint = _RCRwebutils.adjoint

def inverse(A):
    return _RCRwebutils.inverse(A)
inverse = _RCRwebutils.inverse

def pivotSystem(A, b):
    return _RCRwebutils.pivotSystem(A, b)
pivotSystem = _RCRwebutils.pivotSystem

def transpose(array):
    return _RCRwebutils.transpose(array)
transpose = _RCRwebutils.transpose

def dot(*args):
    return _RCRwebutils.dot(*args)
dot = _RCRwebutils.dot

def forwardSubstitution(A, b):
    return _RCRwebutils.forwardSubstitution(A, b)
forwardSubstitution = _RCRwebutils.forwardSubstitution

def LUInverse(A):
    return _RCRwebutils.LUInverse(A)
LUInverse = _RCRwebutils.LUInverse

def chiSquared(*args):
    return _RCRwebutils.chiSquared(*args)
chiSquared = _RCRwebutils.chiSquared

def residuals(*args):
    return _RCRwebutils.residuals(*args)
residuals = _RCRwebutils.residuals

def jacobian(*args):
    return _RCRwebutils.jacobian(*args)
jacobian = _RCRwebutils.jacobian

def paramuncertainty(*args):
    return _RCRwebutils.paramuncertainty(*args)
paramuncertainty = _RCRwebutils.paramuncertainty

def modifiedGN(*args):
    return _RCRwebutils.modifiedGN(*args)
modifiedGN = _RCRwebutils.modifiedGN

def regularGN(*args):
    return _RCRwebutils.regularGN(*args)
regularGN = _RCRwebutils.regularGN

def factorial(n):
    return _RCRwebutils.factorial(n)
factorial = _RCRwebutils.factorial

def fRand(fMin, fMax):
    return _RCRwebutils.fRand(fMin, fMax)
fRand = _RCRwebutils.fRand

def gaussian(x, mu, sig):
    return _RCRwebutils.gaussian(x, mu, sig)
gaussian = _RCRwebutils.gaussian

def getAvg(*args):
    return _RCRwebutils.getAvg(*args)
getAvg = _RCRwebutils.getAvg

def getLnX_Bar(*args):
    return _RCRwebutils.getLnX_Bar(*args)
getLnX_Bar = _RCRwebutils.getLnX_Bar
class NonParametric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonParametric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NonParametric, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _RCRwebutils.new_NonParametric()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def muFunc(self, *args):
        return _RCRwebutils.NonParametric_muFunc(self, *args)
    __swig_setmethods__["indices"] = _RCRwebutils.NonParametric_indices_set
    __swig_getmethods__["indices"] = _RCRwebutils.NonParametric_indices_get
    if _newclass:
        indices = _swig_property(_RCRwebutils.NonParametric_indices_get, _RCRwebutils.NonParametric_indices_set)
    __swig_destroy__ = _RCRwebutils.delete_NonParametric
    __del__ = lambda self: None
NonParametric_swigregister = _RCRwebutils.NonParametric_swigregister
NonParametric_swigregister(NonParametric)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _RCRwebutils.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RCRwebutils.IntVector___nonzero__(self)

    def __bool__(self):
        return _RCRwebutils.IntVector___bool__(self)

    def __len__(self):
        return _RCRwebutils.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _RCRwebutils.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RCRwebutils.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RCRwebutils.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RCRwebutils.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RCRwebutils.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RCRwebutils.IntVector___setitem__(self, *args)

    def pop(self):
        return _RCRwebutils.IntVector_pop(self)

    def append(self, x):
        return _RCRwebutils.IntVector_append(self, x)

    def empty(self):
        return _RCRwebutils.IntVector_empty(self)

    def size(self):
        return _RCRwebutils.IntVector_size(self)

    def swap(self, v):
        return _RCRwebutils.IntVector_swap(self, v)

    def begin(self):
        return _RCRwebutils.IntVector_begin(self)

    def end(self):
        return _RCRwebutils.IntVector_end(self)

    def rbegin(self):
        return _RCRwebutils.IntVector_rbegin(self)

    def rend(self):
        return _RCRwebutils.IntVector_rend(self)

    def clear(self):
        return _RCRwebutils.IntVector_clear(self)

    def get_allocator(self):
        return _RCRwebutils.IntVector_get_allocator(self)

    def pop_back(self):
        return _RCRwebutils.IntVector_pop_back(self)

    def erase(self, *args):
        return _RCRwebutils.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _RCRwebutils.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _RCRwebutils.IntVector_push_back(self, x)

    def front(self):
        return _RCRwebutils.IntVector_front(self)

    def back(self):
        return _RCRwebutils.IntVector_back(self)

    def assign(self, n, x):
        return _RCRwebutils.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _RCRwebutils.IntVector_resize(self, *args)

    def insert(self, *args):
        return _RCRwebutils.IntVector_insert(self, *args)

    def reserve(self, n):
        return _RCRwebutils.IntVector_reserve(self, n)

    def capacity(self):
        return _RCRwebutils.IntVector_capacity(self)
    __swig_destroy__ = _RCRwebutils.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _RCRwebutils.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _RCRwebutils.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RCRwebutils.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _RCRwebutils.DoubleVector___bool__(self)

    def __len__(self):
        return _RCRwebutils.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _RCRwebutils.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RCRwebutils.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RCRwebutils.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RCRwebutils.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RCRwebutils.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RCRwebutils.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _RCRwebutils.DoubleVector_pop(self)

    def append(self, x):
        return _RCRwebutils.DoubleVector_append(self, x)

    def empty(self):
        return _RCRwebutils.DoubleVector_empty(self)

    def size(self):
        return _RCRwebutils.DoubleVector_size(self)

    def swap(self, v):
        return _RCRwebutils.DoubleVector_swap(self, v)

    def begin(self):
        return _RCRwebutils.DoubleVector_begin(self)

    def end(self):
        return _RCRwebutils.DoubleVector_end(self)

    def rbegin(self):
        return _RCRwebutils.DoubleVector_rbegin(self)

    def rend(self):
        return _RCRwebutils.DoubleVector_rend(self)

    def clear(self):
        return _RCRwebutils.DoubleVector_clear(self)

    def get_allocator(self):
        return _RCRwebutils.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _RCRwebutils.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _RCRwebutils.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _RCRwebutils.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _RCRwebutils.DoubleVector_push_back(self, x)

    def front(self):
        return _RCRwebutils.DoubleVector_front(self)

    def back(self):
        return _RCRwebutils.DoubleVector_back(self)

    def assign(self, n, x):
        return _RCRwebutils.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _RCRwebutils.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _RCRwebutils.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _RCRwebutils.DoubleVector_reserve(self, n)

    def capacity(self):
        return _RCRwebutils.DoubleVector_capacity(self)
    __swig_destroy__ = _RCRwebutils.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _RCRwebutils.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

# This file is compatible with both classic and new-style classes.


